[{"title":"《C++ Primer》学习笔记——第1章 开始","date":"2023-12-16T14:19:58.000Z","url":"/2023/12/16/Cpp-Primer-Chapter-1/","tags":[["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["C++","/tags/C/"]],"categories":[["计算机科学与技术","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/"]],"content":"我们通过编写一个简单的程序来开始对C++的学习。假设有一家书店现在需要一个程序来处理其销售记录，每条销售记录包含三个数据项： 0-201-70353-X 4 24.99 第一项是书的ISBN号，第二项是销售的册数，第三项是书的单价。 为了编写这个程序，需要用到C++的一些基本特性。并且容易得知，这个程序需要： 定义变量 进行输入和输出 使用数据结构保存数据 检测两条记录是否有相同的ISBN号 包含一个循环来处理所有的销售记录 1.1 编写一个简单的C++程序 每个C程序都包含一个或多个函数（function）。其中必须有一个名为main的函数，操作系统通过调用main函数来运行C程序。 一个简单的main函数如下所示： 函数的定义包含四部分： 返回类型（return type），在这里是int，即整数类型 函数名（function name） 形参列表（parameter list），包含在一对括号中，可以为空 函数体（function body），包含在一对花括号中 main函数虽然比较特殊，但除返回类型必须为int类型外，其定义方法与其他函数是一致的。 这个main函数非常简单，其唯一的功能就是通过return语句返回一个值为0的数。 在大多数操作系统中，main函数的返回值被用来指示状态。0表示成功，而-1表示失败（错误）。 注： 1.当return语句返回值时，这个值必须和函数的返回类型相容。例如在上面的程序中，reutrn返回0，而0恰好是一个int类型的值。 2.类型是程序设计中的一个基本概念。一种类型不仅定义了数据元素的内容，还定义了这类数据上可以运行的运算。程序中的数据都保存在变量中，而每个变量都有类型。 编译、运行程序 程序的源代码一般保存在源文件（source file）中。当程序的代码编写好后，就需要对其进行编译，以得到可被操作系统运行的程序。我们既可以通过IDE（集成开发环境）进行编译，又可以通过在命令行界面中调用编译器来进行编译。 这里以Linux操作系统为例，演示如何编译、运行上面的程序。 首先，需要用如下命令下载GNU编译器（使用的包管理器依具体的发行版而定）： 然后通过如下命令调用编译器，编译上面的代码： 其中g++是调用GNU编译器的命令，-o prog1表示将源文件编译为名为prog1的可执行文件，而prog1.cc是要编译的源文件。-Wall选项会检测代码中的错误，并在发生错误时给出错误信息，这有利于程序的调试，因此在编译时习惯上都会选用该选项。 在编译完成后，会得到名为prog1的可执行文件。可以通过如下命令来运行这个程序： 其中，./表示文件在当前目录下。 在Linux系统中，还可通过如下命令来获取程序的返回值： 在运行上面的程序并输入上述命令后，就会得到返回值0。 1.2 初识输入输出 C++通过iostream标准库提供输入输出机制。iostream标准库包括istream和ostream两类对象，分别用来控制输入流和输出流。所谓流（stream），就是按顺序生成和消耗的字符序列。 标准输入输出对象 iostream标准库定义了四个输入输出对象： cin：标准输入，istream类对象，用于处理输入的数据。 cout：标准输出，ostream类对象，用于处理输出的数据。 cerr：标准错误，ostream类对象，用于输出警告和错误信息。 clog：ostream类对象，用于输出程序运行时的一般性信息。 一个使用IO库的程序 对于我们要编写的书店程序而言，数据的输入和输出显然是必要的。在这里，我们先解决一个相关但简单的问题：编写一个程序，提示用户输入两个数，并输出它们的和。 在编译并运行这个程序后，首先会在屏幕上输出文字： Enter two numbers: 假设用户输入了： 3 7 在按下回车后，屏幕上就会显示程序运行的结果： The sum of 3 and 7 is 10 注意到在代码的第一行，使用了#include &lt;iostream&gt;来指定使用iostream标准库，尖括号&lt;&gt;中的名字被称为头文件（header）。若在程序中使用了标准库，则必须要用#include &lt;标准库名&gt;来在代码中指定相关的头文件（头文件名就是标准库名）。且一般习惯将#include语句写在源文件的开始位置。 向流写入数据 main函数体中的第一个语句是： 这个语句执行了一个表达式（expression）。 表达式： 由一个或多个运算对象以及（通常是）一个运算符组成，执行后返回一个运算结果。 上述语句使用了输出运算符&lt;&lt;。输出运算符&lt;&lt;左侧的运算对象必须是一个ostream类对象，而右侧的对象是要输出的值。输出运算符&lt;&lt;会将右侧的值写入到左侧的ostream对象中，并返回左侧的ostream对象（即其左侧的ostream对象就是表达式的运算结果）。 不难看出，上述语句中的第一个输出运算符会将&quot;Enter two numbers: &quot;写入到标准输出流cout中，然后返回cout，返回的cout又将成为第二个输出运算符左侧的运算对象。而第二个输出运算符会将endl写入到cout中。这个语句事实上将两个表达式合并到一个语句中，我们也可以将这个语句分别写成两个两个语句： 第一条语句是向用户输出一行文字'Enter two numbers: '。第二条语句是向输出流cout中写入操纵符（manipulator）endl。endl的功能是向输出流中插入一个换行符（\\n），并立刻刷新缓冲区（buffer）。 注： 1.表达式的运算对象不一定是数。 2.当我们进行输入输出操作时，由于处理器的运行速度快，输入输出设备的运行速度慢，为了协调这种运行速度差异，提高程序的运行效率，计算机会在内存中划出一块名为缓冲区的区域来临时存放输入输出的数据。例如，想象一下我们正在吃袋装零食，如果我们每吃一袋就要下楼扔一次垃圾，就太麻烦了。我们可以先把垃圾放在一个垃圾桶中，等吃完零食后再把垃圾桶中的垃圾处理掉。此时，零食包装袋就是需要输出的数据，而垃圾桶就是缓冲区。 命名空间 注意到先前在使用标准输出cout时，没有直接写cout，而是写了std::cout。前缀std::指出使用的名字cout是定义在名为std的命名空间（namespace）中的。 命名空间是C的一个基本特性。C语言规定变量名不能和关键字冲突，但没有规定变量名不能和库中的变量名冲突。为了避免这种冲突，C引入了命名空间，用于指定所使用名称的出处。标准库定义的所有名字都在命名空间std中。 在使用标准库中的名字时，必须显式地指出使用的名字来自于命名空间std。例如，要使用标准输出cout，就必须写std::cout，其中作用域运算符::的功能就是指定使用的名字cout来自命名空间std。 从流读取数据 在提示用户输入数字后，程序就需要读取用户输入的数字。 首先创建两个变量来保存用户输入的数字（程序中的数据都保存在变量中）： 我们创建了两个int型的变量v1和v2，并将其初始化（即在创建变量时为其赋予一个值）为0。 程序通过如下语句将数据保存在变量v1和v2中： 输入运算符&gt;&gt;左侧的运算对象必须是一个istream类对象，其功能是将左侧istream类对象中的数据写入到右侧对象中，并返回左侧的istream对象（即其左侧的istream对象就是表达式的运算结果）。 上述语句中的第一个输入运算符会将标准输入cin中保存的第一个数写入到变量v1中，然后返回cin，而cin又将成为第二个输入运算符左侧的运算对象。第二个输入运算符则会将cin中保存的第二个数写入到变量v2中。简单来说，上述语句的功能就是从标准输入cin中读取两个数，并将第一个数写入到v1中，将第二个数写入到v2中。这条语句和下面的两条语句是等价的： 完成程序 在读取用户输入的两个数后，程序就可以输出运算的结果： 尽管与之前的输出语句相比，这条语句要更长，但其功能也非常容易理解，即按顺序将&quot;The sum of &quot;，v1，&quot; and &quot;等值写入到标准输出cout中。 1.3 注释 注释（comments）的作用是帮助人类理解代码，通常用于概述算法，说明变量的用途和解释晦涩难懂的代码段。编译器在编译时会忽略掉注释。 C++中注释的种类 C++中的注释有两种。 单行注释： 以双斜线//开始，以换行符结束。单行注释中可以包含任何文本，包括额外的双斜线。 多行注释： 以/*开始，以*/结束（/*和*/称为注释界定符），其中可以包含除/*和*/以外的任意内容，包括换行符。编译器会将/*和*/之间的内容都当作注释。 在使用多行注释时，最好指明多行注释中的程序行是注释的一部分，常用的方法是在多行注释中每一行的开头写一个星号*。 多行注释不能嵌套 一个多行注释不能嵌套在另一个多行注释中，否则编译器会报错。这是因为多行注释是以/*开始，以*/结束的，如果将一个多行注释嵌套在另一个多行注释中，那么编译器就无法理解注释从哪里开始，到哪里结束。若编译下面的代码，则编译器会报错： 当我们在调试程序时，经常会注释掉一些代码。考虑到这些代码中可能会包含多行注释，因此注释这些代码最好的方法是在代码中每一行的开头加上双斜线（即用单行注释的方式来注释掉需要注释的代码）。 1.4 控制流 语句一般是按顺序执行的。而C++提供了几种控制流语句，允许我们写出更为复杂的语句执行路径。 1.4.1 while语句 while语句会反复执行一段代码，直至条件为假。可以利用while语句编写一个程序，求1到10的和。 可以看出程序中包含了一段while语句。while语句的结构为： while语句会交替检测condition和执行statement。条件（condition）就是一个会产生真假结果的表达式。当condition为真时，就会执行statement。在执行完statement后，while语句又会检测condition是否为真，若为真，则继续执行statement，若为假，则结束while语句。 在上面的例子中，while语句的结构为： while语句的条件使用小于等于运算符（&lt;=）来检测val是否小于等于10。当val小于等于10时，条件为真，就会执行while循环体。在这里，while循环体是由两条语句组成的语句块（由一对花括号所包围的语句的集合）。 第一条语句使用了复合赋值运算符（+=），求出sum和val的和，并将结果保存在sum中。这条语句和sum = sum + val;是等价的。 第二条语句使用了递增运算符（++），将val的值加1。++val和val = val + 1;是等价的。 当执行完while循环体后，while语句会再次检测条件是否为真（注意此时val的值已加1）。当val仍小于等于10时，会继续执行while循环体。当val大于10时，程序就会结束执行while循环，继续执行接下来的语句。 1.4.2 for语句 在while语句中，采用了在循环条件中检测变量，在循环体中递增变量的模式。C++中定义了另一种语句——for语句来简化这种循环。可以使用for语句重写计算1到10的和的程序： 与先前一样，我们定义了int型变量sum来保存求和结果。而变量val的定义则成为for语句的一部分。 for语句的定义由两部分组成：循环头和循环体。循环头用于控制循环次数，包括一个初始化语句（init-statement）、一个循环条件（condition）以及一个表达式（expression）。 在本例中，初始化语句是： 这一初始化语句创建了一个int型变量val，并将其值初始化为1。与while循环的例子不同的是，for循环初始化语句定义的变量val只能在循环中使用，在循环外无法使用。初始化语句只在for循环开始时执行一次。 在本例中，循环条件是： 当val的值小于等于10时，条件为真，程序会执行for循环体中的语句。 在本例中，表达式是： 表达式会在for循环体之后执行。本例中的表达式同样是使用递增运算符（++）将val的值加1。在执行完表达式后，for语句会重新检测循环条件，若val的新值仍小于等于10，则继续执行for循环体，若val的值大于10，则结束for循环，继续执行接下来的语句。 简要总结一下本例中for循环的执行过程： 1.执行初始化语句，创建变量val并将其值初始化为1。 2.检测循环条件。若val的值小于等于10，则执行for循环体，否则结束循环，执行for循环后的第一条语句。 3.执行表达式，将val的值加1。 4.重复第2步，检测循环条件，只要条件为真，就继续执行接下来的步骤。 注： 1.初始化语句、循环条件和表达式之间是用分号而不是逗号分隔。 2.初始化语句和表达式可以为空。 1.4.3 读取数量不定的输入数据 我们已经编写了一个求从1到10这10个整数的和的程序。我们可以对这个程序进行扩展，编写一个求用户输入的数的和的程序。与先前的情况不同的是，我们事先并不知道会读取多少个数，程序需要一直对输入的数进行求和，直至没有新的输入为止。 如果输入： 3 4 5 6 则程序会输出： Sum is: 18 在这里，我们使用变量value保存用户输入的每个数。而数据的读取操作是在while循环的条件中完成的： 注意到while循环的条件是表达式 输入运算符&gt;&gt;会将用户输入的数保存在变量value中，并返回左侧的std::cin。也就是说，表达式的运算结果就是std::cin。while循环的条件实际上是在检测std::cin。 当一个istream对象作条件时，条件实际上是在检测流的状态。若流没有错误，则istream对象有效，条件为真。当遇到文件结束符（end-of-file）或无效输入（例如读取的值不是一个整数）时，istream对象的状态会变为无效，此时条件为假。 本例中的while循环会一直执行至遇到文件结束符或无效输入。while循环体使用复合赋值运算符（+=）将当前value的值加到sum上。在while循环结束后，程序就会输出求和的结果。 1.4.4 if语句 C++提供了if语句来实现条件执行，即当条件为真时，执行if语句中的内容，否则不执行。 可以利用if语句编写一个程序，统计用户输入的某个数连续出现的次数。 与之前的程序相比，该程序中新的内容就是两个if语句。其中第一个if语句 的条件是std::cin &gt;&gt; currVal，该条件只有在有初始输入时才为真，换言之，只有当有数据输入时，if语句中的内容才会被执行。 第二个if语句包含在while循环体中： 在第二个if语句的条件val == currVal中，程序使用了相等运算符（==）来检测val是否和currVal相等。若二者相等，则执行if后的语句，使cnt（计数器）的值加1。若二者不相等，则执行else之后的语句块，输出当前值连续出现的次数，并做好统计下一个数连续出现的次数的准备。 并且，要注意到，在while语句结束后，最后一个currVal连续出现的次数没有被输出，因此需要在while语句之后，将最后一个currVal连续出现的次数输出。 注： 1.在C中，使用=进行赋值，使用==判断两个对象的值是否相等。一个常见的错误是在条件中将==误用成=。 2.C中没有强制的缩进格式要求，但习惯上会做适当的缩进，以使得代码结构更清晰，提升代码可读性。 1.5 类简介 为了完成书店程序，我们还需要定义一个数据结构（data structure）来表示销售数据。在C++中，可以通过定义一个类（class）来定义一个数据结构。一个类定义了一个数据类型，及其相关的一组操作。 为了使用一个类，我们需要知道： 类名是什么？ 类在哪里定义？ 这个类支持什么操作？ 在这里，假定要使用的类名为Sales_item，它定义在头文件Sales_item.h中。 为了在程序中访问定义类的头文件，需要在代码中使用#include &quot;头文件名&quot;。头文件一般用其中定义的类名来命名，其后缀通常是.h（实际上，大多数情况下对头文件的文件格式不会有强制性的要求，甚至.txt文件也可以作为头文件使用）。 1.5.1 Sales_item类 Sales_item类的作用是表示一本书的总销售额、售出册数和平均售价。在这里，我们暂且不需要知道Sales_item类是如何实现的，只需要知道Sales_item类的对象可以执行什么操作。 每个类实际上都定义了一个新的数据类型，类型名就是类名。因此，Sales_item类定义了一个名为Sales_item的类型。当我们写出 时，我们就定义了一个名为item的Sales_item类的变量（对象）。 Sales_item类对象可以执行如下操作： 调用名为isbn的函数从一个Sales_item类对象中提取ISBN号。 使用输入运算符&gt;&gt;和输出运算符&lt;&lt;读、写Sales_item类对象。 使用赋值运算符=将一个Sales_item类对象的值赋给另一个Sales_item类对象。 使用加法运算符+将两个Sales_item类对象相加。两个对象必须表示同一本书（有着相同的ISBN号），加法运算的结果是一个新的Sales_item类对象，其ISBN号与两个运算对象相同，总销售额和售出册数则等于两个运算对象的对应值之和。 读写Sales_item 下面的程序会从标准输入中读取销售记录，保存到一个Sales_item类对象中，并输出。 如果输入 0-201-70353-X 4 24.99 则会输出 0-201-70353-X 4 99.96 24.99 输入表示书店以24.99美元的价格售出了4册书。输出表示这本书总售出册数是4，总销售额是99.96美元，平均售价是24.99美元。 Sales_item对象的加法 下面的程序会在读取两条销售记录后将其相加。 如果输入 0-201-78345-X 3 20.00 0-201-78345-X 2 25.00 则会输出 0-201-78345-X 5 110 22 注： 通过文件重定向操作，可以实现在运行程序时从一个文件读取输入数据，并将输出结果保存在另一个文件中的效果。 Linux系统中文件重定向的命令为： 上述命令会运行名为addItems的文件，且会从名为infile的文件中读取输入数据，并将输出结果保存到名为outfile的文件中。两个文件都位于当前目录中，并且outfile可以不预先创建。 1.5.2 初识成员函数 成员函数： 成员函数是在类的定义内部声明和定义的函数。成员函数可以操作类的任意对象，以及访问类对象的成员。 要将两个Sales_item类对象相加，首先需要检查这两个Sales_item类对象是否有相同的ISBN号（如果ISBN号相同，则表示二者是同一本书的两条销售记录，应该合并）。通过调用定义在Sales_item类中的名为isbn的成员函数，就可以实现这一点。 上述代码中if语句的条件item1.isbn() == item2.isbn()调用了名为isbn的成员函数。 我们通常用一个类对象来调用成员函数。上述条件的左侧 使用了点运算符.来表达“获取名为item1的Sales_item对象的isbn成员”。点运算符只能作用于类类型的对象，其左侧运算对象必须是一个类类型对象，右侧运算对象必须是该类型的一个成员名，运算结果为右侧运算对象指定的成员名。 当我们访问一个成员函数时，实现的效果就是调用该成员函数。我们通过调用运算符()来调用函数。调用运算符的内部用于放置实参（argument）列表（可能为空）。因此， 会调用名为isbn的成员函数，并返回保存在item1中的ISBN号。 综上所述， 会比较item1和item2中保存的ISBN号，若相同，则条件为真，若不同，则条件为假。 1.6 书店程序 利用之前所学的知识，我们现在可以完成一个读取、处理和输出销售数据的书店程序。 在这里，我们假设同一本书（ISBN号相同）的所有销售记录是保存在一起的。 我们可以参考1.4.4节和1.5.2节的程序。这个书店程序使用total保存最终的销售数据，并通过最外层if语句的条件来完成初始输入的检测和写入。若没有数据输入，则直接跳到后面的else语句，输出一条错误信息，提示用户没有数据输入。若初始输入成功，则创建变量trans来保存后续输入的销售记录，并和之前一样，通过while循环不断读取销售记录。若新输入记录的ISBN号和当前记录的ISBN号相同，则表示是同一本书的销售记录，将二者合并（total += trans;）；若新输入记录的ISBN号和当前记录的ISBN号不同，则当前书的销售记录已处理完毕，且输入了下一本书的销售记录，需要将当前书最终的销售记录输出，并更新total（total = trans;），做好处理下一本书销售记录的准备。 此外，还需要注意，在while循环结束后，total中还保存着最后一本书的销售数据，因此还需要在while循环结束后，将最后一本书的销售数据输出。 若已事先将所有销售记录保存在一个文件中，则可以通过文件重定向操作，从文件中快速读取销售记录，并将结果保存在另一个文件中。"},{"title":"单一定义规则（ODR）与LNK2005错误","date":"2023-11-22T12:33:33.000Z","url":"/2023/11/22/ODR-and-LNK2005/","tags":[["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["技术问题","/tags/%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/"],["C++","/tags/C/"]],"categories":[["计算机科学与技术","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/"]],"content":"前言近年来，随着Python的爆火，越来越多的人（包括我在内）在初次学习编程语言时学习的都是Python而不是C或C++。而先学Python的人在学习C++时很容易会被Python编程中的一些习惯所影响，从而遇到一些问题。 我在初学C++时，就被单一定义规则（One Definition Rule，ODR）和LNK2005错误所困扰。经过一番摸索，我明确了问题的症结所在，并找到了解决方案。我认为，对于C++的初学者而言，牢记ODR，养成良好的代码编写习惯，是非常重要的。 问题描述为了实现在屏幕上输出文字”Hello World!”的功能，我们可以在项目中创建一个名为Hello World.cpp的源文件，并在其中编写如下的代码： 编译后就会出现显示”Hello World!”的对话框。 现在，如果我们想实现定义一个初始值为10的整数型变量a并在屏幕上输出其值的功能，我们可以在项目中另创建一个名为variable.cpp的源文件，并在其中编写如下的代码： 此时，如果进行编译就会发现无法正常编译，并且编译器（Visual Studio 2022）会报告LNK2005错误，这是为什么呢？ 问题的症结：单一定义规则（ODR）为了解决上述问题，我们需要知道Pyhon和C++的三个不同之处： 第一，在一个C++程序中，必须要有一个main函数作为程序的入口。而在Python中，代码从顶部的第一行开始执行，不需要定义main函数。 第二，Python中的各个.py源文件之间是独立的，执行一个源文件时其他源文件不会被执行。而在C++中，编译源文件时会将项目中所有的.cpp源文件都编译，且会从包含main函数的源文件开始编译。 第三，C++遵循单一定义规则（ODR），而Python中没有这样的规则。单一定义规则（ODR）简单来说就是在一个程序中，变量、函数、类等只能有一个定义（ODR的具体内容可以参考Definitions and ODR (One Definition Rule)）。而在Python中，可以在同一个程序中定义多个同名的变量、函数或类，且后面的定义会覆盖掉前面的定义。 明白了以上三点，就可以很轻松地看出先前问题的症结。在编译variable.cpp时，会将同一个项目中的Hello World.cpp一同编译。并且这两个源文件中都定义了main函数，违背了ODR，由此导致编译器报告LNK2005错误。 解决方案由于在编译variable.cpp时，会将Hello World.cpp一同编译，因此为了遵守ODR，需要在编译variable.cpp前，将Hello World.cpp中main函数的定义注释掉，以此保证只有一个main函数的定义。 此时variable.cpp就可以正常编译。 附录当我向Copilot（New Bing）询问如何解决上面提到的问题时，Copilot（New Bing）提出可以将两个源文件中的main函数分别命名为main1和main2。具体来说就是： 将Hello World.cpp修改为 将variable.cpp修改为 但这样是不可行的。如果这么做，编译器会报告LNK2019错误。这是因为main1和main2不能作为main函数的命名。在上面的例子中，两个源文件事实上是没有main函数的，故编译器报告了LNK2019错误。"},{"title":"tags","date":"2023-11-22T12:39:38.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"title":"categories","date":"2023-11-22T12:31:34.000Z","url":"/categories/index.html","categories":[[" ",""]]}]
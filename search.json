[{"title":"单一定义规则（ODR）与LNK2005错误","date":"2023-11-22T12:33:33.000Z","url":"/2023/11/22/ODR-and-LNK2005/","tags":[["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["技术问题","/tags/%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/"],["C++","/tags/C/"]],"categories":[["计算机科学与技术","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/"]],"content":"前言近年来，随着Python的爆火，越来越多的人（包括我在内）在初次学习编程语言时学习的都是Python而不是C或C++。而先学Python的人在学习C++时很容易会被Python编程中的一些习惯所影响，从而遇到一些问题。 我在初学C++时，就被单一定义规则（One Definition Rule，ODR）和LNK2005错误所困扰。经过一番摸索，我明确了问题的症结所在，并找到了解决方案。我认为，对于C++的初学者而言，牢记ODR，养成良好的代码编写习惯，是非常重要的。 问题描述为了实现在屏幕上输出文字”Hello World!”的功能，我们可以在项目中创建一个名为Hello World.cpp的源文件，并在其中编写如下的代码： 编译后就会出现显示”Hello World!”的对话框。 现在，如果我们想实现定义一个初始值为10的整数型变量a并在屏幕上输出其值的功能，我们可以在项目中另创建一个名为variable.cpp的源文件，并在其中编写如下的代码： 此时，如果进行编译就会发现无法正常编译，并且编译器（Visual Studio 2022）会报告LNK2005错误，这是为什么呢？ 问题的症结：单一定义规则（ODR）为了解决上述问题，我们需要知道Pyhon和C++的三个不同之处： 第一，在一个C++程序中，必须要有一个main函数作为程序的入口。而在Python中，代码从顶部的第一行开始执行，不需要定义main函数。 第二，Python中的各个.py源文件之间是独立的，执行一个源文件时其他源文件不会被执行。而在C++中，编译源文件时会将项目中所有的.cpp源文件都编译，且会从包含main函数的源文件开始编译。 第三，C++遵循单一定义规则（ODR），而Python中没有这样的规则。单一定义规则（ODR）简单来说就是在一个程序中，变量、函数、类等只能有一个定义（ODR的具体内容可以参考Definitions and ODR (One Definition Rule)）。而在Python中，可以在同一个程序中定义多个同名的变量、函数或类，且后面的定义会覆盖掉前面的定义。 明白了以上三点，就可以很轻松地看出先前问题的症结。在编译variable.cpp时，会将同一个项目中的Hello World.cpp一同编译。并且这两个源文件中都定义了main函数，违背了ODR，由此导致编译器报告LNK2005错误。 解决方案由于在编译variable.cpp时，会将Hello World.cpp一同编译，因此为了遵守ODR，需要在编译variable.cpp前，将Hello World.cpp中main函数的定义注释掉，以此保证只有一个main函数的定义。 此时variable.cpp就可以正常编译。 附录当我向Copilot（New Bing）询问如何解决上面提到的问题时，Copilot（New Bing）提出可以将两个源文件中的main函数分别命名为main1和main2。具体来说就是： 将Hello World.cpp修改为 将variable.cpp修改为 但这样是不可行的。如果这么做，编译器会报告LNK2019错误。这是因为main1和main2不能作为main函数的命名。在上面的例子中，两个源文件事实上是没有main函数的，故编译器报告了LNK2019错误。"},{"title":"categories","date":"2023-11-22T12:31:34.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"tags","date":"2023-11-22T12:39:38.000Z","url":"/tags/index.html","categories":[[" ",""]]}]
[{"title":"C++程序设计——第1章 C++基础知识","date":"2023-11-26T13:55:21.000Z","url":"/2023/11/26/Cpp-Chapter1/","tags":[["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["C++","/tags/C/"]],"categories":[["计算机科学与技术","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/"]],"content":"1. 如何编写C++程序编写C++程序有四个步骤： 创建项目。 在项目中创建文件（源文件）。 在文件中编写代码。 运行程序。 1.1 创建项目编写C++程序最常用的IDE（集成开发环境）是Visual Studio。 创建项目的一般步骤为（以Visual Studio 2022为例）： 打开Visual Studio。 点击创建新项目。在新出现的窗口中的语言选项栏选择C++，选中空项目，然后点击下一步。 配置项目的有关信息（名称、路径等）。 1.2 在项目中创建文件在Visual Studio界面下的解决方案资源管理器中可以找到刚才创建的项目。在下方的源文件处右键，选择添加-新建项。再选择C++文件（.cpp），并对文件进行命名，最后点击添加即可。 1.3 编写代码在刚刚创建的C++源文件中编写一段代码，以实现在屏幕上输出文字”Hello World!”的功能。 1.4 运行程序在Viual Studio中点击上方菜单栏的本地Windows调试器，即可运行程序。 2. 注释注释的概念： 代码中的一些解释、说明用的文字。 注释的作用： 方便自己和他人阅读代码，提高代码的可读性。 注释的内容会被编译器忽略，不会被编译。 注释的类型： 单行注释： 在一行代码后添加//即可添加单行注释。 多行注释： 在注释的第一行和最后一行分别写上/*和*/，其中的内容就是多行注释。 示例： 可以试着为刚才的Hello World程序的代码添加注释。 3. 变量变量的概念： 有具名的、可供程序操作的、内部数据可变的内存空间。 变量的作用： 为一段指定的内存空间取名（即变量名），方便我们操作这段内存空间。 定义变量： 数据类型 变量名 = 变量的初始值; 注： 程序中所有的数据都是放置在内存中的。 与Python等编程语言不同，使用C++编写程序时需要自行管理内存资源，因此有必要从内存空间的角度来理解变量等概念。 每一段内存空间都有一个唯一的16进制的地址编号。如果用地址编号去调用内存，就太麻烦了。而如果为这段内存空间取名，后续在调用内存时就只需要用变量名即可，这样就方便许多。 变量就像是一个贴有标签（变量名）的、有开口的箱子。我们可以往这个箱子里放置一些物品（数据），并且可以对这些物品进行数量上的操作（但是我们不能改变这些物品的种类，即变量的数据类型是不可变更的）。如果我们知道箱子的标签，那么我们就可以很方便地找到并使用箱子中的物品。 在一个C++程序中，一个变量有且只能有一个定义。 示例： 4.常量常量的概念： 程序运行过程中，内部数据始终不变的内存空间。 常量的作用： 记录程序中不可更改的数据。 定义常量： 定义常量的方式有两种。 define 宏常量：#define 常量名 常量值 通常在文件上方进行定义。 const关键字：const 数据类型 常量名 = 常量值; 在定义变量时使用const关键字，就可以指定变量的值为常量。 注： 与变量类似，我们也可以把常量理解为一个有标签的箱子，只不过这个箱子是封闭的，我们不能对放置在其中的物品进行数量上的操作。 常量不可修改。若修改常量，则编译时会报错。 示例： 5.关键字关键字的概念： C++中预先规定的，有一定功能（含义）的字符序列。 C++中的关键字有很多（如之前学习过的int和const），在日常学习和实践中要注意积累。 注：关键字不能作为变量或常量的名称，否则会导致歧义，且编译时会报错。 6.标识符命名规则标识符的概念： 标识符是用于表示以下内容之一的字符序列： 对象、变量或常量名称（最常见的标识符） 类、结构或联合名称 枚举类型名称 类、结构、联合或枚举的成员 函数或类成员函数 typedef名称 标签名称 宏名称 宏参数 标识符的命名规则： 标识符不能是关键字 标识符只能由字母、数字和下划线组成 第一个字符必须为字母或下划线 标识符中的字母区分大小写 注：给标识符命名时，尽量做到见名知意，以提高代码可读性。"},{"title":"单一定义规则（ODR）与LNK2005错误","date":"2023-11-22T12:33:33.000Z","url":"/2023/11/22/ODR-and-LNK2005/","tags":[["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["技术问题","/tags/%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/"],["C++","/tags/C/"]],"categories":[["计算机科学与技术","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/"]],"content":"前言近年来，随着Python的爆火，越来越多的人（包括我在内）在初次学习编程语言时学习的都是Python而不是C或C++。而先学Python的人在学习C++时很容易会被Python编程中的一些习惯所影响，从而遇到一些问题。 我在初学C++时，就被单一定义规则（One Definition Rule，ODR）和LNK2005错误所困扰。经过一番摸索，我明确了问题的症结所在，并找到了解决方案。我认为，对于C++的初学者而言，牢记ODR，养成良好的代码编写习惯，是非常重要的。 问题描述为了实现在屏幕上输出文字”Hello World!”的功能，我们可以在项目中创建一个名为Hello World.cpp的源文件，并在其中编写如下的代码： 编译后就会出现显示”Hello World!”的对话框。 现在，如果我们想实现定义一个初始值为10的整数型变量a并在屏幕上输出其值的功能，我们可以在项目中另创建一个名为variable.cpp的源文件，并在其中编写如下的代码： 此时，如果进行编译就会发现无法正常编译，并且编译器（Visual Studio 2022）会报告LNK2005错误，这是为什么呢？ 问题的症结：单一定义规则（ODR）为了解决上述问题，我们需要知道Pyhon和C++的三个不同之处： 第一，在一个C++程序中，必须要有一个main函数作为程序的入口。而在Python中，代码从顶部的第一行开始执行，不需要定义main函数。 第二，Python中的各个.py源文件之间是独立的，执行一个源文件时其他源文件不会被执行。而在C++中，编译源文件时会将项目中所有的.cpp源文件都编译，且会从包含main函数的源文件开始编译。 第三，C++遵循单一定义规则（ODR），而Python中没有这样的规则。单一定义规则（ODR）简单来说就是在一个程序中，变量、函数、类等只能有一个定义（ODR的具体内容可以参考Definitions and ODR (One Definition Rule)）。而在Python中，可以在同一个程序中定义多个同名的变量、函数或类，且后面的定义会覆盖掉前面的定义。 明白了以上三点，就可以很轻松地看出先前问题的症结。在编译variable.cpp时，会将同一个项目中的Hello World.cpp一同编译。并且这两个源文件中都定义了main函数，违背了ODR，由此导致编译器报告LNK2005错误。 解决方案由于在编译variable.cpp时，会将Hello World.cpp一同编译，因此为了遵守ODR，需要在编译variable.cpp前，将Hello World.cpp中main函数的定义注释掉，以此保证只有一个main函数的定义。 此时variable.cpp就可以正常编译。 附录当我向Copilot（New Bing）询问如何解决上面提到的问题时，Copilot（New Bing）提出可以将两个源文件中的main函数分别命名为main1和main2。具体来说就是： 将Hello World.cpp修改为 将variable.cpp修改为 但这样是不可行的。如果这么做，编译器会报告LNK2019错误。这是因为main1和main2不能作为main函数的命名。在上面的例子中，两个源文件事实上是没有main函数的，故编译器报告了LNK2019错误。"},{"title":"categories","date":"2023-11-22T12:31:34.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"tags","date":"2023-11-22T12:39:38.000Z","url":"/tags/index.html","categories":[[" ",""]]}]